1. A high-level description of each of your public member functions in each of your classes, and why you chose to define each member function in its host class; also explain why (or why not) you decided to make each function virtual or pure virtual. For example, “I chose to define a pure virtual version of the sneeze() function in my base Actor class because all actors in Boulder Blast are able to sneeze, and each type of actor sneezes in a different way.”

# class Actor
## Constructor
	Constuct the actor given its IID, location, direction and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## doSomething
    Do something.
    Each actor is required to have a doSomething function and their actions are widely different, making it impossible to implement in the base class. So I have this function as a virtual and abstract function.
## attacked
    Actions that take place after the player is attacked.
    Most actors have actions when they are attacked, so it's handy to have such function. Since quite a lot of actors do nothing when attacked, so this is a virutal function with empty function body, rather than a pure virtual function that requires every subclass to implement.
## shouldBeRemoved
    Return true if should be removed.
    It's very important to know if an actor should be removed. Every actor should be removed either if (1) some action force them to be removed (2) their hit points = 0. Since there's a common logic, I make it just virtual.
## setShouldBeRemoved, getHitPoints, setHitpoints
    Useful trivial accessor function. Thus just virtual.
## getTypeID
    Get TypeID.
    Each actor has an ID, and it's very useful to know the ID. The ID depends on which subclass the object is, so it's pure virtual.
## getWorld
	Get TypeID.
	Each actor has a world that it belongs to, and it's very useful to know it. It doesn't depend on which subclass the object is, so it's virtual.

# class Wall
## Constructor
	Constuct the wall given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a wall. Clearly it should not be pure virtual.
## doSomething
	Empty function. Wall doesn't do anything. Clearly it should not be pure virtual.

# class Player
## Constructor
	Constuct the player given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a player. Clearly it should not be pure virtual.
## doSomething
	Do what it should do, as described in the spec. Clearly it should not be pure virtual.
## attacked
	Play the right sound for the current hit point level of player.
	Clearly it should not be pure virtual.
## getAmmo, setAmmo
	Useful trivial accessor function. Thus just virtual.
## moveIfPossible
	Move towards its current direction is possible. (Also push the boulder if necessary.)
	Clearly it should not be pure virtual.

# class Boulder
## Constructor
	Constuct the boulder given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a boulder. Clearly it should not be pure virtual.
## doSomething
	Do what it should do, as described in the spec. Clearly it should not be pure virtual.
## push
	Try to push the boulder in the specified direction. Return true if succeed, false otherwise. Clearly it should not be pure virtual.

# class Bullet
## Constructor
	Constuct the bullet given its location, direction and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a bullet. Clearly it should not be pure virtual.
## doSomething
	Do what it should do, as described in the spec. Clearly it should not be pure virtual.
## push
	Try to push the boulder in the specified direction. Return true if succeed, false otherwise. Clearly it should not be pure virtual.

# class Exit
## Constructor
	Constuct the exit given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as an exit. Clearly it should not be pure virtual.
## doSomething
	Do what it should do, as described in the spec. Clearly it should not be pure virtual.

# class Hole
## Constructor
	Constuct the hole given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a hole. Clearly it should not be pure virtual.
## doSomething
	Do what it should do, as described in the spec. Clearly it should not be pure virtual.

# class Goodie
## Constructor
	Constuct the goodie given its imageID, location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## doSomething
	The virtual function that provides the basice function as a goodie (determines if it is still active, play sound and have certain effect if the player is on the same spot). Clearly it should not be pure virtual.


# class Jewel
## Constructor
	Constuct the jewel given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a jewel. Clearly it should not be pure virtual.

# class RestoreHealthGoodie
## Constructor
	Constuct the restore health goodie given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a restore health goodie. Clearly it should not be pure virtual.

# class AmmoGoodie
## Constructor
	Constuct the ammo goodie given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as an ammo goodie. Clearly it should not be pure virtual.

# class ExtraLifeGoodie
## Constructor
	Constuct the extra life goodie given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as an extra life goodie. Clearly it should not be pure virtual.

# class Bot
## Constructor
	Constuct the bot given its imageID, location, direction and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a bot. Clearly it should not be pure virtual.
## doSomething
	Call action() (do what specified in the spec) if the bot is active and shouldAct() (as defined in the spec). Clearly it should not be pure virtual.
## attacked
	Play the right sound based on the bot's hit point. If the bot is dead, call afterDeathAction().
	Clearly it should not be pure virtual.
## moveIfPossible
	Move towards its current direction is possible.
	Clearly it should not be pure virtual.

# class SnarlBot
## Constructor
	Constuct the SnarlBot given its location, type and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a SnarlBot. Clearly it should not be pure virtual.

# class KleptoBot
## Constructor
	Constuct the KleptoBot given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a KleptoBot. Clearly it should not be pure virtual.

# class AngryKleptoBot
## Constructor
	Constuct the AngryKleptoBot given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a AngryKleptoBot. Clearly it should not be pure virtual.

# class KleptoBotFactory
## Constructor
	Constuct the factory given its location, type of bot producing and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a factory. Clearly it should not be pure virtual.
## doSomething
	Produce the designated type of bot if it meets the condition outlined in the spec. Clearly it should not be pure virtual.

2. A list of all functionality that you failed to finish as well as known bugs in your classes, e.g. “I didn’t implement the Exit class.” or “My Angry KleptoBot doesn’t work correctly yet so I treat it like a KleptoBot right now.”

None.

3. A list of other design decisions and assumptions you made; e.g., “It was not specified what to do in situation X, so this is what I decided to do.”

When there're more than one goodies, only consider picking up one of them.

4. A description of how you tested each of your classes (1-2 paragraphs per class).

# class Actor
# class Wall
# class Player
# class Boulder
# class Bullet
# class Exit
# class Hole
# class Goodie
# class Jewel
# class RestoreHealthGoodie
# class AmmoGoodie
# class ExtraLifeGoodie
# class Bot
# class SnarlBot
# class KleptoBot
# class AngryKleptoBot
# class KleptoBotFactory
