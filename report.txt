1. A high-level description of each of your public member functions in each of your classes, and why you chose to define each member function in its host class; also explain why (or why not) you decided to make each function virtual or pure virtual. For example, “I chose to define a pure virtual version of the sneeze() function in my base Actor class because all actors in Boulder Blast are able to sneeze, and each type of actor sneezes in a different way.”

# class Actor
## Constructor
	Construct the actor given its IID, location, direction and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## doSomething
	A pure virtual function.
    Each actor is required to have a doSomething function and their actions are widely different, making it impossible to implement in the base class. So I have this function as a pure virtual function.
## attacked
    Actions that take place after the player is attacked.
    Most actors have actions when they are attacked, so it's handy to have such function. Since quite a lot of actors do nothing when attacked, so this is a virtual function with empty function body, rather than a pure virtual function that requires every subclass to implement.
## shouldBeRemoved
    Return true if should be removed.
    It's very important to know if an actor should be removed. Every actor should be removed either if (1) some action force them to be removed (2) their hit points = 0. Since there's a common logic, I make it just virtual.
## setShouldBeRemoved, getHitPoints, setHitpoints
    Useful trivial accessor function. Thus just virtual.
## getTypeID
    Get TypeID.
    Each actor has an ID, and it's very useful to know the ID. The ID depends on which subclass the object is, so it's pure virtual.
## getWorld
	Get TypeID.
	Each actor has a world that it belongs to, and it's very useful to know it. It doesn't depend on which subclass the object is, so it's virtual.

# class Wall
## Constructor
	Construct the wall given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a wall. Clearly it should not be pure virtual.
## doSomething
	Empty function. Wall doesn't do anything. Clearly it should not be pure virtual.

# class Player
## Constructor
	Construct the player given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a player. Clearly it should not be pure virtual.
## doSomething
	Do what it should do, as described in the spec. (Get the key user pressed, move to the specified firection, fire or do nothing accordingly.) Clearly it should not be pure virtual.
## attacked
	Play the right sound (died sound if dead impact sound otherwise) for the current hit point level of player.
	Clearly it should not be pure virtual.
## getAmmo, setAmmo
	Useful trivial accessor function. Thus just virtual.
## moveIfPossible
	Move towards its current direction is possible (not blocked by robot, wall, hole or factory). (Also push the boulder if necessary.)
	Clearly it should not be pure virtual.

# class Boulder
## Constructor
	Construct the boulder given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a boulder. Clearly it should not be pure virtual.
## doSomething
	Do nothing. Clearly it should not be pure virtual.
## push
	Return true and move itself towards the specified direction if not blocked, return false otherwise. Clearly it should not be pure virtual.

# class Bullet
## Constructor
	Construct the bullet given its location, direction and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a bullet. Clearly it should not be pure virtual.
## doSomething
	Check if it can move forward. Move forward and check check again. If it fails in any of the checks, destroy itself and cause damages. Clearly it should not be pure virtual. Clearly it should not be pure virtual.

# class Exit
## Constructor
	Construct the exit given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as an exit. Clearly it should not be pure virtual.
## doSomething
	Check if the player collects all the jewels and the exit is not shown, show the exit then. If the exit is shown and the player is on the same spot, tell StudentWorld the player won the current level. Clearly it should not be pure virtual.

# class Hole
## Constructor
	Construct the hole given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a hole. Clearly it should not be pure virtual.
## doSomething
	Do nothing. Clearly it should not be pure virtual.

# class Goodie
## Constructor
	Construct the goodie given its imageID, location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## doSomething
	The virtual function that provides the basic function as a goodie (determines if it is still active, play sound and have certain effect if the player is on the same spot). Clearly it should not be pure virtual.


# class Jewel
## Constructor
	Construct the jewel given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a jewel. Clearly it should not be pure virtual.

# class RestoreHealthGoodie
## Constructor
	Construct the restore health goodie given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a restore health goodie. Clearly it should not be pure virtual.

# class AmmoGoodie
## Constructor
	Construct the ammo goodie given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as an ammo goodie. Clearly it should not be pure virtual.

# class ExtraLifeGoodie
## Constructor
	Construct the extra life goodie given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as an extra life goodie. Clearly it should not be pure virtual.

# class Bot
## Constructor
	Construct the bot given its imageID, location, direction and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a bot. Clearly it should not be pure virtual.
## doSomething
	Call action() (do what specified in the spec) if the bot is active and shouldAct() (as defined in the spec). Clearly it should not be pure virtual.
## attacked
	Play the right sound based on the bot's hit point. If the bot is dead, call afterDeathAction().
	Clearly it should not be pure virtual.
## moveIfPossible
	Move towards its current direction is possible.
	Clearly it should not be pure virtual.

# class SnarlBot
## Constructor
	Construct the SnarlBot given its location, type and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a SnarlBot. Clearly it should not be pure virtual.

# class KleptoBot
## Constructor
	Construct the KleptoBot given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a KleptoBot. Clearly it should not be pure virtual.

# class AngryKleptoBot
## Constructor
	Construct the AngryKleptoBot given its location and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a AngryKleptoBot. Clearly it should not be pure virtual.

# class KleptoBotFactory
## Constructor
	Construct the factory given its location, type of bot producing and the world it belongs to.
	Clearly it should not be virtual or pure virtual.
## getTypeID
	Return its identity as a factory. Clearly it should not be pure virtual.
## doSomething
	Produce the designated type of bot if it meets the condition outlined in the spec. Clearly it should not be pure virtual.

# class StudentWorld
## Constructor
	Initialize GameWorld with given asset directory, also seed the rand generator.
	Clearly it should not be pure virtual.
## init
	Initialize variables, load the map and create actors.
	Clearly it should be just virtual.
## move
	Update the stat text, call every actor's doSomething function, then remove dead actors, reduce bonus point.
	Clearly it should be just virtual.
## cleanUp
	Delete actors in m_actors vector.
	Clearly it should be just virtual.
## ~StudentWorld
    Call　the cleanUp function.
    Clearly it should be just virtual.
## locationAtDirection
	Return the location actor with given location and direction is facing.
	This is a static function.
## addActor
	Add the actor to the private actors vector.
	Clearly it should not be virtual.
## playerWon, setPlayerWon, incCurrentJewels, getPlayer, shouldShowExit, getActor
	Trivial accessor functions.
	Clearly it should not be virtual.
## countKleptoBots
	Clearly it should not be virtual.
## randomNumber
	Generate a random number.
	Clearly it should not be virtual.
## getGoodie
	Get the goodie at the location (x, y).
	Clearly it should not be virtual.


2. A list of all functionality that you failed to finish as well as known bugs in your classes, e.g. “I didn’t implement the Exit class.” or “My Angry KleptoBot doesn’t work correctly yet so I treat it like a KleptoBot right now.”

None.

3. A list of other design decisions and assumptions you made; e.g., “It was not specified what to do in situation X, so this is what I decided to do.”

It's not specified if newly add objects should act immediately. For simplicity's sake, I let them act at the next move.
When there're more than one goodies, only consider picking up one of them.

4. A description of how you tested each of your classes (1-2 paragraphs per class).

# class Actor
	It's the base class, so I just test to make sure the GraphObject is presented correctly, and test the rest of functionalities in its subclasses.
# class Wall
	Make sure no actor can go over it. So basically it's tested in the process of testing other actors
# class Player
	Move the actor around to make sure it won't go through walls, holes, etc.
	Fire the bullet.
# class Boulder
	Move the boulder around and make sure it can only interact with hole, especially can't be on the same spot as the exit.
	Make sure 5 bullets can destroy a boulder.
# class Bullet
	Fire it in all directions, by both bot and player.
	Make sure it only hit valid targets, and won't cause wall to disappear after several shots.
# class Exit
	Make sure the exit is not shown on map, and appear after the player collects , and play the right sound once.
	Collect the last jewell when a bot is at the same spot as the exit, and see if everything still goes smoothly.
# class Hole
	Make sure bullet can go through, while other actors can't.
	Make sure the hole disappears after the player push a boulder into it.
# class Goodie
	It's an abstract base class. I test it by testing its subclasses.
# class Jewel
	Make sure it can add right amount of score once collected by player.
# class RestoreHealthGoodie
	Make sure it can add right amount of score and restore health once collected by player.
# class AmmoGoodie
	Make sure it can add right amount of score and add right amount of ammos once collected by player.
# class ExtraLifeGoodie
	Make sure it can add right amount of score and add right amount of lives once collected by player.
# class Bot
	It's a base class. I test it by testing its subclasses.
# class SnarlBot
	Make sure the two different types (horizontal/vertical) works differently while having the same pattern, hit points, etc. 
	Set breakpoint to check whether it does something every frame or not. Move the player around, see if it fires when necessary.
# class KleptoBot
	Wait to see if it can pick up goodie. Then kill it to see if it drops correctly (the correct goodie, the correct location and the correct sound.)
# class AngryKleptoBot
	Test it like a Kleptobot.
	Test if it can also fire, using the same procedure as SnarlBot.
# class KleptoBotFactory
	Test if it manufactures the right bot using break point and debugger.
	Test that it will stop only when certain conditions outlined in spec are met. Also make sure it's not destroyable (though bullet can hit it) by firing at the factory.